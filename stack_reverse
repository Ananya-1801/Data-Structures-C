// WAP IN C TO REVERSE THE ELEMENTS OF A STACK USING RECURSION
#include <stdio.h>
#include <stdlib.h>

struct Stack
{
    int size;
    int top;
    int *s;
} st;

void create(struct Stack *st)
{
    printf("Enter the size of the stack: ");
    scanf("%d", &st->size);
    st->top = -1;
    st->s = (int *)malloc(st->size * sizeof(int));
}

void Display(struct Stack st)
{
    int i;
    for (i = st.top; i >= 0; i--)
    {
        printf("%d ", st.s[i]);
    }
    printf("\n");
}

void push(struct Stack *st, int x)
{
    if (st->top == st->size - 1)
        printf("Stack Overflow!\n");
    else
    {
        st->top++;
        st->s[st->top] = x;
    }
}

int pop(struct Stack *st)
{
    int x = -1;
    if (st->top == -1)
        printf("Underflow!\n");
    else
    {
        x = st->s[st->top];
        st->top--;
    }
    return x;
}

int isEmpty(struct Stack st)
{
    if (st.top == -1)
        return 1;
    else
        return 0;
}

void insertAtBottom(struct Stack *st, int x)
{
    if (isEmpty(*st))
    {
        push(st, x);
        return;
    }
    int temp = pop(st);
    insertAtBottom(st, x);
    push(st, temp);
}

void reverse(struct Stack *st)
{
    if (isEmpty(*st))
    {
        return;
    }
    int temp = pop(st);
    reverse(st);
    insertAtBottom(st, temp);
}

int main()
{
    struct Stack st;
    create(&st);

    push(&st, 10);
    push(&st, 20);
    push(&st, 30);
    push(&st, 40);

    printf("Original Stack:\n");
    Display(st);

    reverse(&st);

    printf("Reversed Stack:\n");
    Display(st);

    return 0;
}
